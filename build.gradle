//file:noinspection GradlePackageVersionRange
plugins {
    id 'fabric-loom' version '1.1-SNAPSHOT'
    id 'maven-publish'
    id 'io.github.juuxel.loom-quiltflower' version '1.7.3'
}

allprojects {
    apply plugin: "java"
    apply plugin: "fabric-loom"
    apply plugin: "maven-publish"

    def ENV = System.getenv()

    version = "${project.mod_version}+${rootProject.minecraft_base_version}"
    group = rootProject.maven_group

    tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xlint:unchecked"
    }

    dependencies {
        minecraft "com.mojang:minecraft:${rootProject.minecraft_version}"
        mappings "net.fabricmc:yarn:${rootProject.yarn_mappings}:v2"
        modImplementation "net.fabricmc:fabric-loader:${rootProject.loader_version}"

        modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
    }

    processResources {
        inputs.property "version", project.version
        filteringCharset "UTF-8"

        filesMatching("fabric.mod.json") {
            expand "version": project.version
        }
    }

    def targetJavaVersion = 17
    tasks.withType(JavaCompile).configureEach {
        // ensure that the encoding is set to UTF-8, no matter what the system default is
        // this fixes some edge cases with special characters not displaying correctly
        // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
        // If Javadoc is generated, this must be specified in that task too.
        it.options.encoding = "UTF-8"
        if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
            it.options.release = targetJavaVersion
        }
    }

    java {
        def javaVersion = JavaVersion.toVersion(targetJavaVersion)
        if (JavaVersion.current() < javaVersion) {
            toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
        }
        archivesBaseName = project.archives_base_name
        // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
        // if it is present.
        // If you remove this line, sources will not be generated.
        withSourcesJar()
    }

    jar {
        from("LICENSE") {
            rename { "${it}_${project.archivesBaseName}" }
        }
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java
            }
        }

        repositories {
            maven {
                url ENV.MAVEN_URL
                credentials {
                    username ENV.MAVEN_USER
                    password ENV.MAVEN_PASSWORD
                }
            }
        }
    }
}

repositories {
    maven { url "https://maven.terraformersmc.com/releases/" }
    maven { url "https://maven.shedaniel.me/" }
    maven {
        url "https://api.modrinth.com/maven"
        content {
            includeGroup "maven.modrinth"
        }
    }
    maven { url = "https://maven.nucleoid.xyz/" }
}

sourceSets {
    testmod {
        runtimeClasspath += main.runtimeClasspath
        compileClasspath += main.compileClasspath
    }
}

loom {
    runs {
        testmodClient {
            client()
            ideConfigGenerated project.rootProject == project
            name = "Testmod Client"
            source sourceSets.testmod
        }
        testmodServer {
            server()
            ideConfigGenerated project.rootProject == project
            name = "Testmod Server"
            source sourceSets.testmod
        }
    }

    accessWidenerPath = file("src/main/resources/owo.accesswidener")
}

dependencies {
    modLocalRuntime("me.shedaniel:RoughlyEnoughItems-fabric:${project.rei_version}")
    modCompileOnly("me.shedaniel:RoughlyEnoughItems-api-fabric:${project.rei_version}")

    modCompileOnly("com.terraformersmc:modmenu:${project.modmenu_version}")
    modLocalRuntime("com.terraformersmc:modmenu:${project.modmenu_version}")

    api(include("blue.endless:jankson:${project.jankson_version}"))

    modCompileOnly "fr.catcore:server-translations-api:${project.stapi_version}"

    testmodImplementation sourceSets.main.output
    testmodAnnotationProcessor sourceSets.main.output
}

javadoc {
    options.stylesheetFile = new File(projectDir, "stylesheet.css")
    options.tags = ["apiNote", "implNote", "implSpec"]
    options.addStringOption("Xdoclint:-missing", "-quiet")
    options.encoding = 'UTF-8'
}
